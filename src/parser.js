module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { start_rule: peg$parsestart_rule },
        peg$startRuleFunction  = peg$parsestart_rule,

        peg$c0 = "{",
        peg$c1 = peg$literalExpectation("{", false),
        peg$c2 = "}",
        peg$c3 = peg$literalExpectation("}", false),
        peg$c4 = function(k, n, h, l, m, r, b) {
            return {
        	  type:k,
        	  name:n,
        	  header:h,
        	  linkage:l,
        	  meta:m,
        	  revision:r,
        	  body:b
        	};
          },
        peg$c5 = function(l) {
            return extractList(l, 0);
          },
        peg$c6 = function(k, v) {
            return {
        	  type:k,
        	  version:v
        	};
          },
        peg$c7 = function(v) { return v; },
        peg$c8 = "1",
        peg$c9 = peg$literalExpectation("1", false),
        peg$c10 = function(k, n, p, d) {
          return {
            type:k,
        	name:n,
        	prefix:p,
        	revision_date:extractOptional(d, 0)
          };
        },
        peg$c11 = ";",
        peg$c12 = peg$literalExpectation(";", false),
        peg$c13 = function(k, n) { 
              return {
        	  type:k,
        	  name:n,
        	  revision_date:null
        	};
          },
        peg$c14 = function(k, n, d) {
            return {
        	  type:k,
        	  name:n,
        	  revision_date:extractOptional(d, 0)
        	};
          },
        peg$c15 = function(k, u) {
            return {
        	  type:k,
        	  uri:u
        	};
          },
        peg$c16 = function(u) { return u; },
        peg$c17 = function(k, p) {
            return {
        	  type:k,
        	  prefix:p
        	};
          },
        peg$c18 = function(k, n, p) {
            return {
        	  type:k,
        	  name:n,
        	  prefix:p
        	};
          },
        peg$c19 = function(k, v) {
            return {
        	  type:k,
        	  text:v
        	};
          },
        peg$c20 = function(k, d, s) {
            return {
        	  type:k,
        	  date:d,
        	  subs:s
        	};
          },
        peg$c21 = function() { return []; },
        peg$c22 = function(s) { return s; },
        peg$c23 = function(k, d) {
            return {
        	  type:k,
        	  date:d
        	};
          },
        peg$c24 = function(k, n, s) {
            return {
        	  type:k,
        	  name:n,
        	  subs:s
        	};
          },
        peg$c25 = function(k, n) {
            return {
        	  type:k,
        	  name:n,
        	  yin:null
        	};
          },
        peg$c26 = function(k, n, y) {
            return {
        	  type:k,
        	  name:n,
        	  yin:extractOptional(y, 0)
        	};
          },
        peg$c27 = function(k, v) {
            return {
        	  type:k,
        	  element:v
        	};
          },
        peg$c28 = function(y) { return y; },
        peg$c29 = function(k, v) {
            return {
        	  type:k,
        	  name:v
        	};
          },
        peg$c30 = function(k, n) {
            return {
        	  type:k,
        	  name:n
        	};
          },
        peg$c31 = function(k, n, b) {
            return {
        	  type:k,
        	  name:n,
        	  body:b
        	};
          },
        peg$c32 = function() { return null; },
        peg$c33 = function(l) { return l; },
        peg$c34 = function(r) { return r; },
        peg$c35 = function(k, v, s) {
            return {
        	  type:k,
        	  range:v,
        	  subs:s
        	};
          },
        peg$c36 = function(f) { return f; },
        peg$c37 = function(k, v) {
              return {
        	      type:k,
        		  value:v
        	  };
          },
        peg$c38 = /^[0-8]/,
        peg$c39 = peg$classExpectation([["0", "8"]], false, false),
        peg$c40 = /^[2-9]/,
        peg$c41 = peg$classExpectation([["2", "9"]], false, false),
        peg$c42 = function(k, n, s) {
            return {
        	  type:k,
        	  pattern:n,
        	  subs:s
        	};
          },
        peg$c43 = function(k, v, s) {
            return {
        	  type:k,
        	  text:v,
        	  subs:s
        	};
          },
        peg$c44 = function(p) { return p; },
        peg$c45 = function(k, v) {
            return {
        	  type:k,
        	  path:v
        	};
          },
        peg$c46 = function(k, v) {
            return {
        	  type:k,
        	  require:v
        	};
          },
        peg$c47 = function(b) { return b; },
        peg$c48 = function(k, v) {
            return {
        	  type:k,
        	  position:v
        	};
          },
        peg$c49 = function(k, v) {
            return {
        	  type:k,
        	  status:v
        	};
          },
        peg$c50 = function(k, v) {
            return {
        	  type:k,
        	  config:v
        	};
          },
        peg$c51 = function(k, v) {
            return {
        	  type:k,
        	  mandatory:v
        	};
          },
        peg$c52 = function(k, v) {
            return {
        	  type:k,
        	  value:v
        	};
          },
        peg$c53 = function(k, v) {
            return {
        	  type:k,
        	  integer:v
        	};
          },
        peg$c54 = function(k, v) {
            return {
        	  type:k,
        	  key:v
        	};
          },
        peg$c55 = function(h, t) {
            return buildList(h, t, 1);
          },
        peg$c56 = function(k, v) {
            return {
        	  type:k,
        	  unique:v
        	};
          },
        peg$c57 = function(k, s) {
            return {
        	  type:k,
        	  subs:s
        	};
          },
        peg$c58 = function(k, v, s) {
            return {
        	  type:k,
        	  deviation:v,
        	  subs:s
        	};
          },
        peg$c59 = function(k, v) {
            return {
        	  type:k,
        	  sub_type:v
        	};
          },
        peg$c60 = function(k, sk, s) {
            return {
        	  type:k,
        	  sub_type:sk,
        	  subs:s
        	};
          },
        peg$c61 = "|",
        peg$c62 = peg$literalExpectation("|", false),
        peg$c63 = function(h, t) {
            return buildList(h, t, 3);
          },
        peg$c64 = "..",
        peg$c65 = peg$literalExpectation("..", false),
        peg$c66 = function(h, t) {
            return [h].concat(extractOptional(t, 3));
          },
        peg$c67 = "-",
        peg$c68 = peg$literalExpectation("-", false),
        peg$c69 = function(a) {
            return {
        	    type:"absolute_node",
        		list:a
        	};
          },
        peg$c70 = function(d) {
            return {
        	    type:"descendant_node",
        		list:d
        	};
          },
        peg$c71 = "/",
        peg$c72 = peg$literalExpectation("/", false),
        peg$c73 = function(n) {
            return extractList(n, 1);
          },
        peg$c74 = function(n, a) {
            return [n].concat(extractOptional(a, 0));
          },
        peg$c75 = ":",
        peg$c76 = peg$literalExpectation(":", false),
        peg$c77 = function(p, i) {
            return { 
        	    prefix:extractOptional(p, 0),
        	    name:i
        	};
          },
        peg$c78 = "[",
        peg$c79 = peg$literalExpectation("[", false),
        peg$c80 = "]",
        peg$c81 = peg$literalExpectation("]", false),
        peg$c82 = ".",
        peg$c83 = peg$literalExpectation(".", false),
        peg$c84 = "=",
        peg$c85 = peg$literalExpectation("=", false),
        peg$c86 = "anyxml",
        peg$c87 = peg$literalExpectation("anyxml", false),
        peg$c88 = "argument",
        peg$c89 = peg$literalExpectation("argument", false),
        peg$c90 = "augment",
        peg$c91 = peg$literalExpectation("augment", false),
        peg$c92 = "base",
        peg$c93 = peg$literalExpectation("base", false),
        peg$c94 = "belongs-to",
        peg$c95 = peg$literalExpectation("belongs-to", false),
        peg$c96 = "bit",
        peg$c97 = peg$literalExpectation("bit", false),
        peg$c98 = "case",
        peg$c99 = peg$literalExpectation("case", false),
        peg$c100 = "choice",
        peg$c101 = peg$literalExpectation("choice", false),
        peg$c102 = "config",
        peg$c103 = peg$literalExpectation("config", false),
        peg$c104 = "contact",
        peg$c105 = peg$literalExpectation("contact", false),
        peg$c106 = "container",
        peg$c107 = peg$literalExpectation("container", false),
        peg$c108 = "default",
        peg$c109 = peg$literalExpectation("default", false),
        peg$c110 = "description",
        peg$c111 = peg$literalExpectation("description", false),
        peg$c112 = "enum",
        peg$c113 = peg$literalExpectation("enum", false),
        peg$c114 = "error-app-tag",
        peg$c115 = peg$literalExpectation("error-app-tag", false),
        peg$c116 = "error-message",
        peg$c117 = peg$literalExpectation("error-message", false),
        peg$c118 = "extension",
        peg$c119 = peg$literalExpectation("extension", false),
        peg$c120 = "deviation",
        peg$c121 = peg$literalExpectation("deviation", false),
        peg$c122 = "deviate",
        peg$c123 = peg$literalExpectation("deviate", false),
        peg$c124 = "feature",
        peg$c125 = peg$literalExpectation("feature", false),
        peg$c126 = "fraction-digits",
        peg$c127 = peg$literalExpectation("fraction-digits", false),
        peg$c128 = "grouping",
        peg$c129 = peg$literalExpectation("grouping", false),
        peg$c130 = "identity",
        peg$c131 = peg$literalExpectation("identity", false),
        peg$c132 = "if-feature",
        peg$c133 = peg$literalExpectation("if-feature", false),
        peg$c134 = "import",
        peg$c135 = peg$literalExpectation("import", false),
        peg$c136 = "include",
        peg$c137 = peg$literalExpectation("include", false),
        peg$c138 = "input",
        peg$c139 = peg$literalExpectation("input", false),
        peg$c140 = "key",
        peg$c141 = peg$literalExpectation("key", false),
        peg$c142 = "leaf",
        peg$c143 = peg$literalExpectation("leaf", false),
        peg$c144 = "leaf-list",
        peg$c145 = peg$literalExpectation("leaf-list", false),
        peg$c146 = "length",
        peg$c147 = peg$literalExpectation("length", false),
        peg$c148 = "list",
        peg$c149 = peg$literalExpectation("list", false),
        peg$c150 = "mandatory",
        peg$c151 = peg$literalExpectation("mandatory", false),
        peg$c152 = "max-elements",
        peg$c153 = peg$literalExpectation("max-elements", false),
        peg$c154 = "min-elements",
        peg$c155 = peg$literalExpectation("min-elements", false),
        peg$c156 = "module",
        peg$c157 = peg$literalExpectation("module", false),
        peg$c158 = "must",
        peg$c159 = peg$literalExpectation("must", false),
        peg$c160 = "namespace",
        peg$c161 = peg$literalExpectation("namespace", false),
        peg$c162 = "notification",
        peg$c163 = peg$literalExpectation("notification", false),
        peg$c164 = "ordered-by",
        peg$c165 = peg$literalExpectation("ordered-by", false),
        peg$c166 = "organization",
        peg$c167 = peg$literalExpectation("organization", false),
        peg$c168 = "output",
        peg$c169 = peg$literalExpectation("output", false),
        peg$c170 = "path",
        peg$c171 = peg$literalExpectation("path", false),
        peg$c172 = "pattern",
        peg$c173 = peg$literalExpectation("pattern", false),
        peg$c174 = "position",
        peg$c175 = peg$literalExpectation("position", false),
        peg$c176 = "prefix",
        peg$c177 = peg$literalExpectation("prefix", false),
        peg$c178 = "presence",
        peg$c179 = peg$literalExpectation("presence", false),
        peg$c180 = "range",
        peg$c181 = peg$literalExpectation("range", false),
        peg$c182 = "reference",
        peg$c183 = peg$literalExpectation("reference", false),
        peg$c184 = "refine",
        peg$c185 = peg$literalExpectation("refine", false),
        peg$c186 = "require-instance",
        peg$c187 = peg$literalExpectation("require-instance", false),
        peg$c188 = "revision",
        peg$c189 = peg$literalExpectation("revision", false),
        peg$c190 = "revision-date",
        peg$c191 = peg$literalExpectation("revision-date", false),
        peg$c192 = "rpc",
        peg$c193 = peg$literalExpectation("rpc", false),
        peg$c194 = "status",
        peg$c195 = peg$literalExpectation("status", false),
        peg$c196 = "submodule",
        peg$c197 = peg$literalExpectation("submodule", false),
        peg$c198 = "type",
        peg$c199 = peg$literalExpectation("type", false),
        peg$c200 = "typedef",
        peg$c201 = peg$literalExpectation("typedef", false),
        peg$c202 = "unique",
        peg$c203 = peg$literalExpectation("unique", false),
        peg$c204 = "units",
        peg$c205 = peg$literalExpectation("units", false),
        peg$c206 = "uses",
        peg$c207 = peg$literalExpectation("uses", false),
        peg$c208 = "value",
        peg$c209 = peg$literalExpectation("value", false),
        peg$c210 = "when",
        peg$c211 = peg$literalExpectation("when", false),
        peg$c212 = "yang-version",
        peg$c213 = peg$literalExpectation("yang-version", false),
        peg$c214 = "yin-element",
        peg$c215 = peg$literalExpectation("yin-element", false),
        peg$c216 = "add",
        peg$c217 = peg$literalExpectation("add", false),
        peg$c218 = "current",
        peg$c219 = peg$literalExpectation("current", false),
        peg$c220 = "delete",
        peg$c221 = peg$literalExpectation("delete", false),
        peg$c222 = "deprecated",
        peg$c223 = peg$literalExpectation("deprecated", false),
        peg$c224 = "false",
        peg$c225 = peg$literalExpectation("false", false),
        peg$c226 = "max",
        peg$c227 = peg$literalExpectation("max", false),
        peg$c228 = "min",
        peg$c229 = peg$literalExpectation("min", false),
        peg$c230 = "not_supported",
        peg$c231 = peg$literalExpectation("not_supported", false),
        peg$c232 = "obsolete",
        peg$c233 = peg$literalExpectation("obsolete", false),
        peg$c234 = "replace",
        peg$c235 = peg$literalExpectation("replace", false),
        peg$c236 = "system",
        peg$c237 = peg$literalExpectation("system", false),
        peg$c238 = "true",
        peg$c239 = peg$literalExpectation("true", false),
        peg$c240 = "unbounded",
        peg$c241 = peg$literalExpectation("unbounded", false),
        peg$c242 = "user",
        peg$c243 = peg$literalExpectation("user", false),
        peg$c244 = "(",
        peg$c245 = peg$literalExpectation("(", false),
        peg$c246 = ")",
        peg$c247 = peg$literalExpectation(")", false),
        peg$c248 = "0",
        peg$c249 = peg$literalExpectation("0", false),
        peg$c250 = /^[1-9]/,
        peg$c251 = peg$classExpectation([["1", "9"]], false, false),
        peg$c252 = function(p, i, s) {
            return {
        	    type:"unknown",
        	    prefix:p,
        		name:i,
        		param:extractOptional(s, 1),
        		subs:null
        	};
          },
        peg$c253 = function(p, i, s, sub) {
            return {
        	    type:"unknown",
        	    prefix:p,
        		name:i,
        		param:extractOptional(s, 1),
        		subs:extractList(sub, 0)
        	};
          },
        peg$c254 = function(p, i, s) {
            return {
        	    prefix:extractOptional(p, 0),
        		id:i,
        		param:extractOptional(s, 1)
        	};
          },
        peg$c255 = function(p, i, s, sub) {
            return {
        	    prefix:extractOptional(p, 0),
        		id:i,
        		param:extractOptional(s, 1),
        		subs:extractList(sub, 0)
        	};
          },
        peg$c256 = "_",
        peg$c257 = peg$literalExpectation("_", false),
        peg$c258 = /^[Xx]/,
        peg$c259 = peg$classExpectation(["X", "x"], false, false),
        peg$c260 = /^[Mm]/,
        peg$c261 = peg$classExpectation(["M", "m"], false, false),
        peg$c262 = /^[Ll]/,
        peg$c263 = peg$classExpectation(["L", "l"], false, false),
        peg$c264 = peg$anyExpectation(),
        peg$c265 = "+",
        peg$c266 = peg$literalExpectation("+", false),
        peg$c267 = function(head, tail) {
            return buildList(head, tail, 4).join('');
          },
        peg$c268 = /^[";{]/,
        peg$c269 = peg$classExpectation(["\"", ";", "{"], false, false),
        peg$c270 = /^[^";{]/,
        peg$c271 = peg$classExpectation(["\"", ";", "{"], true, false),
        peg$c272 = "//",
        peg$c273 = peg$literalExpectation("//", false),
        peg$c274 = "/*",
        peg$c275 = peg$literalExpectation("/*", false),
        peg$c276 = "*/",
        peg$c277 = peg$literalExpectation("*/", false),
        peg$c278 = "'",
        peg$c279 = peg$literalExpectation("'", false),
        peg$c280 = "%",
        peg$c281 = peg$literalExpectation("%", false),
        peg$c282 = "?",
        peg$c283 = peg$literalExpectation("?", false),
        peg$c284 = "#",
        peg$c285 = peg$literalExpectation("#", false),
        peg$c286 = "@",
        peg$c287 = peg$literalExpectation("@", false),
        peg$c288 = "!",
        peg$c289 = peg$literalExpectation("!", false),
        peg$c290 = "$",
        peg$c291 = peg$literalExpectation("$", false),
        peg$c292 = "&",
        peg$c293 = peg$literalExpectation("&", false),
        peg$c294 = "*",
        peg$c295 = peg$literalExpectation("*", false),
        peg$c296 = ",",
        peg$c297 = peg$literalExpectation(",", false),
        peg$c298 = "~",
        peg$c299 = peg$literalExpectation("~", false),
        peg$c300 = function() { return text(); },
        peg$c301 = "v",
        peg$c302 = peg$literalExpectation("v", false),
        peg$c303 = "::",
        peg$c304 = peg$literalExpectation("::", false),
        peg$c305 = "25",
        peg$c306 = peg$literalExpectation("25", false),
        peg$c307 = /^[0-5]/,
        peg$c308 = peg$classExpectation([["0", "5"]], false, false),
        peg$c309 = "2",
        peg$c310 = peg$literalExpectation("2", false),
        peg$c311 = /^[0-4]/,
        peg$c312 = peg$classExpectation([["0", "4"]], false, false),
        peg$c313 = "",
        peg$c314 = /^[A-Z]/,
        peg$c315 = peg$classExpectation([["A", "Z"]], false, false),
        peg$c316 = /^[a-z]/,
        peg$c317 = peg$classExpectation([["a", "z"]], false, false),
        peg$c318 = /^[\x01-\x7F]/,
        peg$c319 = peg$classExpectation([["\x01", "\x7F"]], false, false),
        peg$c320 = "\r",
        peg$c321 = peg$literalExpectation("\r", false),
        peg$c322 = /^[\0-\x1F]/,
        peg$c323 = peg$classExpectation([["\0", "\x1F"]], false, false),
        peg$c324 = "\x7F",
        peg$c325 = peg$literalExpectation("\x7F", false),
        peg$c326 = /^[0-9]/,
        peg$c327 = peg$classExpectation([["0", "9"]], false, false),
        peg$c328 = /^["]/,
        peg$c329 = peg$classExpectation(["\""], false, false),
        peg$c330 = "a",
        peg$c331 = peg$literalExpectation("A", true),
        peg$c332 = "b",
        peg$c333 = peg$literalExpectation("B", true),
        peg$c334 = "c",
        peg$c335 = peg$literalExpectation("C", true),
        peg$c336 = "d",
        peg$c337 = peg$literalExpectation("D", true),
        peg$c338 = "e",
        peg$c339 = peg$literalExpectation("E", true),
        peg$c340 = "f",
        peg$c341 = peg$literalExpectation("F", true),
        peg$c342 = "\t",
        peg$c343 = peg$literalExpectation("\t", false),
        peg$c344 = "\n",
        peg$c345 = peg$literalExpectation("\n", false),
        peg$c346 = /^[\0-\xFF]/,
        peg$c347 = peg$classExpectation([["\0", "\xFF"]], false, false),
        peg$c348 = " ",
        peg$c349 = peg$literalExpectation(" ", false),
        peg$c350 = /^[!-~]/,
        peg$c351 = peg$classExpectation([["!", "~"]], false, false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart_rule() {
      var s0;

      s0 = peg$parsemodule_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesubmodule_stmt();
      }

      return s0;
    }

    function peg$parsemodule_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parseoptsep();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemodule_keyword();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesep();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier_arg_str();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseoptsep();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s6 = peg$c0;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsestmtsep_no_stmt_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsemodule_header_stmts();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parselinkage_stmts();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsemeta_stmts();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parserevision_stmts();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsebody_stmts();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 125) {
                                s13 = peg$c2;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c3); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parseoptsep();
                                if (s14 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c4(s2, s4, s8, s9, s10, s11, s12);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesubmodule_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parseoptsep();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubmodule_keyword();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesep();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifier_arg_str();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseoptsep();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s6 = peg$c0;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsestmtsep_no_stmt_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesubmodule_header_stmts();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parselinkage_stmts();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsemeta_stmts();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parserevision_stmts();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsebody_stmts();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 125) {
                                s13 = peg$c2;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c3); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parseoptsep();
                                if (s14 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c4(s2, s4, s8, s9, s10, s11, s12);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemodule_header_stmts() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsemodule_header_stmt_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsemodule_header_stmt_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemodule_header_stmt_() {
      var s0;

      s0 = peg$parseyang_version_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenamespace_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseprefix_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseunknown_stmt();
          }
        }
      }

      return s0;
    }

    function peg$parsesubmodule_header_stmts() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsesubmodule_header_stmt_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsesubmodule_header_stmt_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesubmodule_header_stmt_() {
      var s0;

      s0 = peg$parseyang_version_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebelongs_to_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunknown_stmt();
        }
      }

      return s0;
    }

    function peg$parsemeta_stmts() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsemeta_stmt_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsemeta_stmt_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemeta_stmt_() {
      var s0;

      s0 = peg$parseorganization_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecontact_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parselinkage_stmts() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parselinkage_stmt_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parselinkage_stmt_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselinkage_stmt_() {
      var s0;

      s0 = peg$parseimport_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseinclude_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunknown_stmt();
        }
      }

      return s0;
    }

    function peg$parserevision_stmts() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parserevision_stmt();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parserevision_stmt();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebody_stmts() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsebody_stmt_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsebody_stmt_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebody_stmt_() {
      var s0;

      s0 = peg$parseextension_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefeature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentity_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetypedef_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsegrouping_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedata_def_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseaugment_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parserpc_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsenotification_stmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsedeviation_stmt();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseunknown_stmt();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedata_def_stmt() {
      var s0;

      s0 = peg$parsecontainer_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseleaf_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseleaf_list_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parselist_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsechoice_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parseanyxml_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseuses_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunknown_stmt();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseyang_version_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseyang_version_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseyang_version_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c6(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseyang_version_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseyang_version_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseyang_version_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseyang_version_arg();
        }
      }

      return s0;
    }

    function peg$parseyang_version_arg() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 49) {
        s0 = peg$c8;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parseimport_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseimport_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseprefix_stmt();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsestmtsep_no_stmt_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parserevision_date_stmt();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestmtsep_no_stmt_();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s10 = peg$c2;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c3); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c10(s1, s3, s7, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinclude_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseinclude_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c11;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c13(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseinclude_keyword();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesep();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier_arg_str();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseoptsep();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s5 = peg$c0;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsestmtsep_no_stmt_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parserevision_date_stmt();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestmtsep_no_stmt_();
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s8 = peg$c2;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                      }
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c14(s1, s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsenamespace_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamespace_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseuri_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseuri_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseuri();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseuri();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c16(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseuri();
        }
      }

      return s0;
    }

    function peg$parseprefix_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseprefix_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseprefix_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c17(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebelongs_to_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsebelongs_to_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseprefix_stmt();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsestmtsep_no_stmt_();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c2;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c18(s1, s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseorganization_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseorganization_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c19(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontact_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecontact_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c19(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedescription_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedescription_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c19(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsereference_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsereference_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c19(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunits_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseunits_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c19(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserevision_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserevision_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedate_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parserevision_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c20(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserevision_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parserevision_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parserevision_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parserevision_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parserevision_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserevision_stmt_sub_() {
      var s0;

      s0 = peg$parsedescription_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereference_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunknown_stmt();
        }
      }

      return s0;
    }

    function peg$parserevision_date_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parserevision_date_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedate_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c23(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseextension_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseextension_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseextension_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseextension_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseextension_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseextension_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseextension_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseextension_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseextension_stmt_sub_() {
      var s0;

      s0 = peg$parseargument_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatus_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseargument_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseargument_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c11;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c25(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseargument_keyword();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesep();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier_arg_str();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseoptsep();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s5 = peg$c0;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsestmtsep_no_stmt_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parseyin_element_stmt();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestmtsep_no_stmt_();
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s8 = peg$c2;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                      }
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c26(s1, s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseyin_element_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseyin_element_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseyin_element_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseyin_element_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseyin_element_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c28(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseyin_element_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c28(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseyin_element_arg();
        }
      }

      return s0;
    }

    function peg$parseyin_element_arg() {
      var s0;

      s0 = peg$parsetrue_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefalse_keyword();
      }

      return s0;
    }

    function peg$parseidentity_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentity_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentity_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseidentity_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentity_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseidentity_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseidentity_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseidentity_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseidentity_stmt_sub_() {
      var s0;

      s0 = peg$parsebase_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatus_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsebase_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsebase_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_ref_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefeature_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsefeature_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefeature_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefeature_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefeature_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsefeature_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsefeature_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsefeature_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefeature_stmt_sub_() {
      var s0;

      s0 = peg$parseif_feature_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatus_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseif_feature_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseif_feature_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_ref_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmtend();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetypedef_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsetypedef_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetypedef_stmt_subs_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c2;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c24(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetypedef_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsetypedef_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsetypedef_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetypedef_stmt_sub_() {
      var s0;

      s0 = peg$parsetype_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseunits_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedefault_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestatus_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedescription_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsereference_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseunknown_stmt();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetype_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetype_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_ref_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetype_body_stmts();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c31(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetype_body_stmts() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetype_body_stmts_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsetype_body_stmts_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsetype_body_stmt_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsetype_body_stmt_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetype_body_stmt_() {
      var s0;

      s0 = peg$parsenumerical_restrictions();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedecimal64_specification();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestring_restrictions();
          if (s0 === peg$FAILED) {
            s0 = peg$parseenum_specification();
            if (s0 === peg$FAILED) {
              s0 = peg$parseleafref_specification();
              if (s0 === peg$FAILED) {
                s0 = peg$parseidentityref_specification();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseinstance_identifier_specification();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsebits_specification();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseunion_specification();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsebinary_specification();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseunknown_stmt();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsebinary_specification() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parselength_stmt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestmtsep_no_stmt_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumerical_restrictions() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parserange_stmt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestmtsep_no_stmt_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserange_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserange_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserange_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parserange_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserange_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parserange_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parserange_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parserange_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parserange_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserange_stmt_sub_() {
      var s0;

      s0 = peg$parseerror_message_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseerror_app_tag_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedecimal64_specification() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsefraction_digits_stmt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestmtsep_no_stmt_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c36(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefraction_digits_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsefraction_digits_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefraction_digits_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefraction_digits_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefraction_digits_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefraction_digits_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsefraction_digits_arg();
        }
      }

      return s0;
    }

    function peg$parsefraction_digits_arg() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 49) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c38.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        if (peg$c40.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
      }

      return s0;
    }

    function peg$parsestring_restrictions() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsestring_restriction_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parsestring_restriction_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtsep_no_stmt_();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestring_restriction_() {
      var s0;

      s0 = peg$parselength_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepattern_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunknown_stmt();
        }
      }

      return s0;
    }

    function peg$parselength_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parselength_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselength_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parselength_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselength_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parselength_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parselength_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parselength_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parselength_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselength_stmt_sub_() {
      var s0;

      s0 = peg$parseerror_message_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseerror_app_tag_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepattern_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepattern_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepattern_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c42(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepattern_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsepattern_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsepattern_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsepattern_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsepattern_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepattern_stmt_sub_() {
      var s0;

      s0 = peg$parseerror_message_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseerror_app_tag_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedefault_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsedefault_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c19(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseenum_specification() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseenum_stmt();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseenum_stmt();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtsep_no_stmt_();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseenum_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseenum_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseenum_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c43(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseenum_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseenum_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseenum_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseenum_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseenum_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseenum_stmt_sub_() {
      var s0;

      s0 = peg$parsevalue_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatus_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseleafref_specification() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsepath_stmt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestmtsep_no_stmt_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepath_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepath_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepath_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c45(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserequire_instance_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parserequire_instance_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserequire_instance_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c46(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserequire_instance_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserequire_instance_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parserequire_instance_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parserequire_instance_arg();
        }
      }

      return s0;
    }

    function peg$parserequire_instance_arg() {
      var s0;

      s0 = peg$parsetrue_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefalse_keyword();
      }

      return s0;
    }

    function peg$parseinstance_identifier_specification() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parserequire_instance_stmt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestmtsep_no_stmt_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseidentityref_specification() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsebase_stmt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestmtsep_no_stmt_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c47(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunion_specification() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsetype_stmt();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parsetype_stmt();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtsep_no_stmt_();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebits_specification() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsebit_stmt();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parsebit_stmt();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtsep_no_stmt_();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebit_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsebit_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebit_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebit_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsebit_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsebit_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsebit_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsebit_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebit_stmt_sub_() {
      var s0;

      s0 = peg$parseposition_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatus_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseposition_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseposition_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseposition_value_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c48(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseposition_value_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenon_negative_integer_value();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenon_negative_integer_value();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsenon_negative_integer_value();
        }
      }

      return s0;
    }

    function peg$parsestatus_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsestatus_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatus_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c49(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestatus_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatus_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatus_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsestatus_arg();
        }
      }

      return s0;
    }

    function peg$parsestatus_arg() {
      var s0;

      s0 = peg$parsecurrent_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parseobsolete_keyword();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedeprecated_keyword();
        }
      }

      return s0;
    }

    function peg$parseconfig_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseconfig_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseconfig_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c50(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconfig_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseconfig_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseconfig_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseconfig_arg();
        }
      }

      return s0;
    }

    function peg$parseconfig_arg() {
      var s0;

      s0 = peg$parsetrue_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefalse_keyword();
      }

      return s0;
    }

    function peg$parsemandatory_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsemandatory_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemandatory_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemandatory_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemandatory_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsemandatory_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsemandatory_arg();
        }
      }

      return s0;
    }

    function peg$parsemandatory_arg() {
      var s0;

      s0 = peg$parsetrue_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefalse_keyword();
      }

      return s0;
    }

    function peg$parsepresence_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepresence_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c19(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseordered_by_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseordered_by_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseordered_by_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseordered_by_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseordered_by_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseordered_by_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseordered_by_arg();
        }
      }

      return s0;
    }

    function peg$parseordered_by_arg() {
      var s0;

      s0 = peg$parseuser_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesystem_keyword();
      }

      return s0;
    }

    function peg$parsemust_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsemust_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemust_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c43(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemust_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsemust_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsemust_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsemust_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsemust_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemust_stmt_sub_() {
      var s0;

      s0 = peg$parseerror_message_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseerror_app_tag_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseerror_message_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseerror_message_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c19(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseerror_app_tag_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseerror_app_tag_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c19(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemin_elements_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsemin_elements_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemin_value_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c52(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemin_value_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenon_negative_integer_value();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenon_negative_integer_value();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsenon_negative_integer_value();
        }
      }

      return s0;
    }

    function peg$parsemax_elements_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsemax_elements_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemax_value_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c52(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemax_value_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemax_value_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsemax_value_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsemax_value_arg();
        }
      }

      return s0;
    }

    function peg$parsemax_value_arg() {
      var s0;

      s0 = peg$parseunbounded_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepositive_integer_value();
      }

      return s0;
    }

    function peg$parsevalue_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsevalue_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinteger_value_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c53(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinteger_value_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger_value();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseinteger_value();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseinteger_value();
        }
      }

      return s0;
    }

    function peg$parsegrouping_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsegrouping_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsegrouping_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsegrouping_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsegrouping_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsegrouping_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsegrouping_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsegrouping_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsegrouping_stmt_sub_() {
      var s0;

      s0 = peg$parsestatus_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedescription_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsereference_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetypedef_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsegrouping_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedata_def_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseunknown_stmt();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecontainer_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecontainer_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecontainer_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontainer_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecontainer_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsecontainer_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsecontainer_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsecontainer_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecontainer_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemust_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepresence_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseconfig_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestatus_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsedescription_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsereference_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsetypedef_stmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsegrouping_stmt();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsedata_def_stmt();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseunknown_stmt();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseleaf_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseleaf_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseleaf_stmt_subs_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c2;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c24(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseleaf_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseleaf_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseleaf_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseleaf_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetype_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseunits_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemust_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedefault_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseconfig_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemandatory_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsestatus_stmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsedescription_stmt();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsereference_stmt();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseunknown_stmt();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseleaf_list_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseleaf_list_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseleaf_list_stmt_subs_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c2;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c24(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseleaf_list_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseleaf_list_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseleaf_list_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseleaf_list_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetype_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseunits_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemust_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parseconfig_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemin_elements_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemax_elements_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseordered_by_stmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsestatus_stmt();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsedescription_stmt();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsereference_stmt();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseunknown_stmt();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselist_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parselist_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parselist_stmt_subs_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c2;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c24(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselist_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parselist_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parselist_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselist_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemust_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekey_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunique_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parseconfig_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemin_elements_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemax_elements_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseordered_by_stmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsestatus_stmt();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsedescription_stmt();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsereference_stmt();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsetypedef_stmt();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsegrouping_stmt();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsedata_def_stmt();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseunknown_stmt();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekey_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekey_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekey_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c54(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekey_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekey_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsekey_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsekey_arg();
        }
      }

      return s0;
    }

    function peg$parsekey_arg() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenode_identifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsesep();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenode_identifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsesep();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenode_identifier();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c55(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunique_stmt() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseunique_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseunique_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtend();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunique_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseunique_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseunique_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseunique_arg();
        }
      }

      return s0;
    }

    function peg$parseunique_arg() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedescendant_schema_nodeid();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsesep();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsedescendant_schema_nodeid();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsesep();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedescendant_schema_nodeid();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c55(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsechoice_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsechoice_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsechoice_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsechoice_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsechoice_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsechoice_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsechoice_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsechoice_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsechoice_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedefault_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseconfig_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemandatory_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestatus_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsedescription_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsereference_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseshort_case_stmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsecase_stmt();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseunknown_stmt();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseshort_case_stmt() {
      var s0;

      s0 = peg$parsecontainer_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseleaf_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseleaf_list_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parselist_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseanyxml_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parseunknown_stmt();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecase_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecase_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecase_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecase_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecase_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsecase_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsecase_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsecase_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecase_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestatus_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedescription_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsereference_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedata_def_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseunknown_stmt();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseanyxml_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseanyxml_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseanyxml_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseanyxml_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseanyxml_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseanyxml_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseanyxml_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseanyxml_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseanyxml_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemust_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseconfig_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemandatory_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestatus_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsedescription_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsereference_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseunknown_stmt();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseuses_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseuses_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_ref_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseuses_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseuses_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseuses_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseuses_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseuses_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseuses_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseuses_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestatus_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedescription_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsereference_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parserefine_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseuses_augment_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunknown_stmt();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserefine_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserefine_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefine_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parserefine_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserefine_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parserefine_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parserefine_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parserefine_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parserefine_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserefine_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedescendant_schema_nodeid();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedescendant_schema_nodeid();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescendant_schema_nodeid();
        }
      }

      return s0;
    }

    function peg$parserefine_stmt_sub_() {
      var s0;

      s0 = peg$parsemust_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedefault_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepresence_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseconfig_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedescription_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsereference_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemandatory_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemin_elements_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsemax_elements_stmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseunknown_stmt();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseuses_augment_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseaugment_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseuses_augment_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseuses_augment_stmt_subs_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c2;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c24(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseuses_augment_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseuses_augment_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseuses_augment_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseuses_augment_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestatus_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedescription_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsereference_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedata_def_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecase_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunknown_stmt();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseuses_augment_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedescendant_schema_nodeid();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedescendant_schema_nodeid();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescendant_schema_nodeid();
        }
      }

      return s0;
    }

    function peg$parseaugment_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseaugment_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaugment_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseaugment_stmt_subs_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c2;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c24(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseaugment_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseaugment_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseaugment_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseaugment_stmt_sub_() {
      var s0;

      s0 = peg$parsewhen_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseif_feature_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestatus_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedescription_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsereference_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedata_def_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecase_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunknown_stmt();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseaugment_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseabsolute_schema_nodeid();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseabsolute_schema_nodeid();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseabsolute_schema_nodeid();
        }
      }

      return s0;
    }

    function peg$parsewhen_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsewhen_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsewhen_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c43(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsewhen_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsewhen_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsewhen_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsewhen_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsewhen_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsewhen_stmt_sub_() {
      var s0;

      s0 = peg$parsedescription_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereference_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunknown_stmt();
        }
      }

      return s0;
    }

    function peg$parserpc_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserpc_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parserpc_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserpc_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parserpc_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parserpc_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parserpc_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parserpc_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserpc_stmt_sub_() {
      var s0;

      s0 = peg$parseif_feature_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatus_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetypedef_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsegrouping_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseinput_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseoutput_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseunknown_stmt();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseinput_stmt() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseinput_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoptsep();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c0;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtsep_no_stmt_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinput_stmt_subs_();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c2;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c57(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinput_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseinput_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseinput_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseinput_stmt_sub_() {
      var s0;

      s0 = peg$parsetypedef_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsegrouping_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedata_def_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseunknown_stmt();
          }
        }
      }

      return s0;
    }

    function peg$parseoutput_stmt() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseoutput_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoptsep();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c0;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestmtsep_no_stmt_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseoutput_stmt_subs_();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c2;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c57(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseoutput_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseoutput_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseoutput_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseoutput_stmt_sub_() {
      var s0;

      s0 = peg$parsetypedef_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsegrouping_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedata_def_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseunknown_stmt();
          }
        }
      }

      return s0;
    }

    function peg$parsenotification_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenotification_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenotification_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenotification_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenotification_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsenotification_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsenotification_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsenotification_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenotification_stmt_sub_() {
      var s0;

      s0 = peg$parseif_feature_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatus_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedescription_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsereference_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetypedef_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsegrouping_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsedata_def_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunknown_stmt();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedeviation_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsedeviation_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedeviation_arg_str();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c0;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestmtsep_no_stmt_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsedeviation_stmt_subs_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c2;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c58(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedeviation_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsedeviation_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsedeviation_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedeviation_stmt_sub_() {
      var s0;

      s0 = peg$parsedescription_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereference_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedeviate_not_supported_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedeviate_add_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedeviate_replace_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedeviate_delete_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseunknown_stmt();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedeviation_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseabsolute_schema_nodeid();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseabsolute_schema_nodeid();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseabsolute_schema_nodeid();
        }
      }

      return s0;
    }

    function peg$parsedeviate_not_supported_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsedeviate_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenot_supported_keyword();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c11;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s6 = peg$c0;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsestmtsep_no_stmt_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c2;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                    }
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c59(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedeviate_add_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedeviate_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseadd_keyword();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedeviate_add_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c60(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedeviate_add_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedeviate_add_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsedeviate_add_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsedeviate_add_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsedeviate_add_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedeviate_add_stmt_sub_() {
      var s0;

      s0 = peg$parseunits_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemust_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunique_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedefault_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseconfig_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsemandatory_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemin_elements_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemax_elements_stmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseunknown_stmt();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedeviate_delete_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedeviate_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedelete_keyword();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedeviate_delete_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c60(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedeviate_delete_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedeviate_delete_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsedeviate_delete_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsedeviate_delete_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsedeviate_delete_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedeviate_delete_stmt_sub_() {
      var s0;

      s0 = peg$parseunits_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemust_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunique_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedefault_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown_stmt();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedeviate_replace_stmt() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedeviate_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsereplace_keyword();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedeviate_replace_stmt_subs();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c60(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedeviate_replace_stmt_subs() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestmtsep_no_stmt_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedeviate_replace_stmt_subs_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsedeviate_replace_stmt_subs_() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsedeviate_replace_stmt_sub_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestmtsep_no_stmt_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsedeviate_replace_stmt_sub_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestmtsep_no_stmt_();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedeviate_replace_stmt_sub_() {
      var s0;

      s0 = peg$parsetype_stmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseunits_stmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedefault_stmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseconfig_stmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemandatory_stmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parsemin_elements_stmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemax_elements_stmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunknown_stmt();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserange_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserange_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parserange_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parserange_arg();
        }
      }

      return s0;
    }

    function peg$parserange_arg() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parserange_part();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseoptsep();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s5 = peg$c61;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseoptsep();
            if (s6 !== peg$FAILED) {
              s7 = peg$parserange_part();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseoptsep();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s5 = peg$c61;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c62); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseoptsep();
              if (s6 !== peg$FAILED) {
                s7 = peg$parserange_part();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c63(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserange_part() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parserange_boundary();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseoptsep();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s4 = peg$c64;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoptsep();
            if (s5 !== peg$FAILED) {
              s6 = peg$parserange_boundary();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c66(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserange_boundary() {
      var s0;

      s0 = peg$parsemin_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemax_keyword();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedecimal_value();
        }
      }

      return s0;
    }

    function peg$parselength_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselength_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parselength_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parselength_arg();
        }
      }

      return s0;
    }

    function peg$parselength_arg() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parselength_part();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseoptsep();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s5 = peg$c61;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseoptsep();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselength_part();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseoptsep();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s5 = peg$c61;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c62); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseoptsep();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselength_part();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c63(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselength_part() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parselength_boundary();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseoptsep();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s4 = peg$c64;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoptsep();
            if (s5 !== peg$FAILED) {
              s6 = peg$parselength_boundary();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c66(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselength_boundary() {
      var s0;

      s0 = peg$parsemin_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemax_keyword();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenon_negative_integer_value();
        }
      }

      return s0;
    }

    function peg$parsedate_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedate_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedate_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsedate_arg();
        }
      }

      return s0;
    }

    function peg$parsedate_arg() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseDIGIT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDIGIT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDIGIT();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c67;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c68); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDIGIT();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDIGIT();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s9 = peg$c67;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c68); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseDIGIT();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseDIGIT();
                        if (s11 !== peg$FAILED) {
                          s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseschema_nodeid() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseabsolute_schema_nodeid();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c69(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedescendant_schema_nodeid();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseabsolute_schema_nodeid() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c71;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsenode_identifier();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c71;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenode_identifier();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c73(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedescendant_schema_nodeid() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenode_identifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseabsolute_schema_nodeid();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c74(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenode_identifier() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c75;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c77(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinstance_identifier() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = [];
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c71;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsenode_identifier();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsepredicate();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsepredicate();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c71;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsenode_identifier();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsepredicate();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsepredicate();
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepredicate() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c78;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepredicate_expr();
          if (s3 === peg$FAILED) {
            s3 = peg$parsenon_negative_integer_value();
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c80;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c81); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepredicate_expr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenode_identifier();
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c82;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c84;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestring_quoted_();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepath_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepath_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepath_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsepath_arg();
        }
      }

      return s0;
    }

    function peg$parsepath_arg() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseabsolute_path();
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parserelative_path();
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseabsolute_path() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = [];
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c71;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsenode_identifier();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsepath_predicate();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsepath_predicate();
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c71;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsenode_identifier();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsepath_predicate();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsepath_predicate();
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserelative_path() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c64) {
        s3 = peg$c64;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c71;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s3 = peg$c64;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s4 = peg$c71;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedescendant_path();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedescendant_path() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsenode_identifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsepath_predicate();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsepath_predicate();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseabsolute_path();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepath_predicate() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c78;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepath_equality_expr();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c80;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c81); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepath_equality_expr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenode_identifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c84;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepath_key_expr();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepath_key_expr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecurrent_function_invocation();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c71;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserel_path_keyexpr();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserel_path_keyexpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c64) {
        s3 = peg$c64;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseWSP();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseWSP();
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c71;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseWSP();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseWSP();
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s3 = peg$c64;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c71;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c72); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseWSP();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseWSP();
                }
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsenode_identifier();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseWSP();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseWSP();
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s6 = peg$c71;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseWSP();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseWSP();
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsenode_identifier();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseWSP();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseWSP();
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c71;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c72); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseWSP();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseWSP();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenode_identifier();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseanyxml_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c86) {
        s0 = peg$c86;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      return s0;
    }

    function peg$parseargument_keyword() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c88) {
        s0 = peg$c88;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parseaugment_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c90) {
        s0 = peg$c90;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parsebase_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c92) {
        s0 = peg$c92;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }

      return s0;
    }

    function peg$parsebelongs_to_keyword() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c94) {
        s0 = peg$c94;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      return s0;
    }

    function peg$parsebit_keyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c96) {
        s0 = peg$c96;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      return s0;
    }

    function peg$parsecase_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c98) {
        s0 = peg$c98;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }

      return s0;
    }

    function peg$parsechoice_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c100) {
        s0 = peg$c100;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }

      return s0;
    }

    function peg$parseconfig_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c102) {
        s0 = peg$c102;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }

      return s0;
    }

    function peg$parsecontact_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c104) {
        s0 = peg$c104;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }

      return s0;
    }

    function peg$parsecontainer_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c106) {
        s0 = peg$c106;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }

      return s0;
    }

    function peg$parsedefault_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c108) {
        s0 = peg$c108;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c109); }
      }

      return s0;
    }

    function peg$parsedescription_keyword() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c110) {
        s0 = peg$c110;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }

      return s0;
    }

    function peg$parseenum_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c112) {
        s0 = peg$c112;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }

      return s0;
    }

    function peg$parseerror_app_tag_keyword() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c114) {
        s0 = peg$c114;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }

      return s0;
    }

    function peg$parseerror_message_keyword() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c116) {
        s0 = peg$c116;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }

      return s0;
    }

    function peg$parseextension_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c118) {
        s0 = peg$c118;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }

      return s0;
    }

    function peg$parsedeviation_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c120) {
        s0 = peg$c120;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }

      return s0;
    }

    function peg$parsedeviate_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c122) {
        s0 = peg$c122;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }

      return s0;
    }

    function peg$parsefeature_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c124) {
        s0 = peg$c124;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }

      return s0;
    }

    function peg$parsefraction_digits_keyword() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c126) {
        s0 = peg$c126;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }

      return s0;
    }

    function peg$parsegrouping_keyword() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c128) {
        s0 = peg$c128;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }

      return s0;
    }

    function peg$parseidentity_keyword() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c130) {
        s0 = peg$c130;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }

      return s0;
    }

    function peg$parseif_feature_keyword() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c132) {
        s0 = peg$c132;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }

      return s0;
    }

    function peg$parseimport_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c134) {
        s0 = peg$c134;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }

      return s0;
    }

    function peg$parseinclude_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c136) {
        s0 = peg$c136;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }

      return s0;
    }

    function peg$parseinput_keyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c138) {
        s0 = peg$c138;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }

      return s0;
    }

    function peg$parsekey_keyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c140) {
        s0 = peg$c140;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }

      return s0;
    }

    function peg$parseleaf_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c142) {
        s0 = peg$c142;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }

      return s0;
    }

    function peg$parseleaf_list_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c144) {
        s0 = peg$c144;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }

      return s0;
    }

    function peg$parselength_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c146) {
        s0 = peg$c146;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }

      return s0;
    }

    function peg$parselist_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c148) {
        s0 = peg$c148;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }

      return s0;
    }

    function peg$parsemandatory_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c150) {
        s0 = peg$c150;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }

      return s0;
    }

    function peg$parsemax_elements_keyword() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c152) {
        s0 = peg$c152;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      return s0;
    }

    function peg$parsemin_elements_keyword() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c154) {
        s0 = peg$c154;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }

      return s0;
    }

    function peg$parsemodule_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c156) {
        s0 = peg$c156;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }

      return s0;
    }

    function peg$parsemust_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c158) {
        s0 = peg$c158;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }

      return s0;
    }

    function peg$parsenamespace_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c160) {
        s0 = peg$c160;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }

      return s0;
    }

    function peg$parsenotification_keyword() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c162) {
        s0 = peg$c162;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      return s0;
    }

    function peg$parseordered_by_keyword() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c164) {
        s0 = peg$c164;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }

      return s0;
    }

    function peg$parseorganization_keyword() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c166) {
        s0 = peg$c166;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }

      return s0;
    }

    function peg$parseoutput_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c168) {
        s0 = peg$c168;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }

      return s0;
    }

    function peg$parsepath_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c170) {
        s0 = peg$c170;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }

      return s0;
    }

    function peg$parsepattern_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c172) {
        s0 = peg$c172;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }

      return s0;
    }

    function peg$parseposition_keyword() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c174) {
        s0 = peg$c174;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }

      return s0;
    }

    function peg$parseprefix_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c176) {
        s0 = peg$c176;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }

      return s0;
    }

    function peg$parsepresence_keyword() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c178) {
        s0 = peg$c178;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }

      return s0;
    }

    function peg$parserange_keyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c180) {
        s0 = peg$c180;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c181); }
      }

      return s0;
    }

    function peg$parsereference_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c182) {
        s0 = peg$c182;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }

      return s0;
    }

    function peg$parserefine_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c184) {
        s0 = peg$c184;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }

      return s0;
    }

    function peg$parserequire_instance_keyword() {
      var s0;

      if (input.substr(peg$currPos, 16) === peg$c186) {
        s0 = peg$c186;
        peg$currPos += 16;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }

      return s0;
    }

    function peg$parserevision_keyword() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c188) {
        s0 = peg$c188;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }

      return s0;
    }

    function peg$parserevision_date_keyword() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c190) {
        s0 = peg$c190;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }

      return s0;
    }

    function peg$parserpc_keyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c192) {
        s0 = peg$c192;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }

      return s0;
    }

    function peg$parsestatus_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c194) {
        s0 = peg$c194;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c195); }
      }

      return s0;
    }

    function peg$parsesubmodule_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c196) {
        s0 = peg$c196;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c197); }
      }

      return s0;
    }

    function peg$parsetype_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c198) {
        s0 = peg$c198;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c199); }
      }

      return s0;
    }

    function peg$parsetypedef_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c200) {
        s0 = peg$c200;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c201); }
      }

      return s0;
    }

    function peg$parseunique_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c202) {
        s0 = peg$c202;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c203); }
      }

      return s0;
    }

    function peg$parseunits_keyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c204) {
        s0 = peg$c204;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c205); }
      }

      return s0;
    }

    function peg$parseuses_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c206) {
        s0 = peg$c206;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }

      return s0;
    }

    function peg$parsevalue_keyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c208) {
        s0 = peg$c208;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c209); }
      }

      return s0;
    }

    function peg$parsewhen_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c210) {
        s0 = peg$c210;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }

      return s0;
    }

    function peg$parseyang_version_keyword() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c212) {
        s0 = peg$c212;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }

      return s0;
    }

    function peg$parseyin_element_keyword() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c214) {
        s0 = peg$c214;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c215); }
      }

      return s0;
    }

    function peg$parseadd_keyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c216) {
        s0 = peg$c216;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c217); }
      }

      return s0;
    }

    function peg$parsecurrent_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c218) {
        s0 = peg$c218;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }

      return s0;
    }

    function peg$parsedelete_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c220) {
        s0 = peg$c220;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }

      return s0;
    }

    function peg$parsedeprecated_keyword() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c222) {
        s0 = peg$c222;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c223); }
      }

      return s0;
    }

    function peg$parsefalse_keyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c224) {
        s0 = peg$c224;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }

      return s0;
    }

    function peg$parsemax_keyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c226) {
        s0 = peg$c226;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c227); }
      }

      return s0;
    }

    function peg$parsemin_keyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c228) {
        s0 = peg$c228;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }

      return s0;
    }

    function peg$parsenot_supported_keyword() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c230) {
        s0 = peg$c230;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }

      return s0;
    }

    function peg$parseobsolete_keyword() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c232) {
        s0 = peg$c232;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }

      return s0;
    }

    function peg$parsereplace_keyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c234) {
        s0 = peg$c234;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c235); }
      }

      return s0;
    }

    function peg$parsesystem_keyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c236) {
        s0 = peg$c236;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }

      return s0;
    }

    function peg$parsetrue_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c238) {
        s0 = peg$c238;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c239); }
      }

      return s0;
    }

    function peg$parseunbounded_keyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c240) {
        s0 = peg$c240;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c241); }
      }

      return s0;
    }

    function peg$parseuser_keyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c242) {
        s0 = peg$c242;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }

      return s0;
    }

    function peg$parsecurrent_function_invocation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecurrent_keyword();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWSP();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWSP();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c244;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c245); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWSP();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWSP();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c246;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c247); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprefix_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifier();
        }
      }

      return s0;
    }

    function peg$parseidentifier_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifier();
        }
      }

      return s0;
    }

    function peg$parseidentifier_ref_arg_str() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier_ref_arg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier_ref_arg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifier_ref_arg();
        }
      }

      return s0;
    }

    function peg$parseidentifier_ref_arg() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c75;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c77(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinteger_value() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c67;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenon_negative_integer_value();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsenon_negative_integer_value();
      }

      return s0;
    }

    function peg$parsenon_negative_integer_value() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c248;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepositive_integer_value();
      }

      return s0;
    }

    function peg$parsepositive_integer_value() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsenon_zero_digit();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDIGIT();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsezero_integer_value() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDIGIT();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDIGIT();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsestmtend() {
      var s0, s1, s2, s3;

      if (input.charCodeAt(peg$currPos) === 59) {
        s0 = peg$c11;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseunknown_stmt();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseunknown_stmt();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c2;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsenon_zero_digit() {
      var s0;

      if (peg$c250.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c251); }
      }

      return s0;
    }

    function peg$parsedecimal_value() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseinteger_value();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c82;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsezero_integer_value();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunknown_stmt() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c75;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsesep();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestring();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseoptsep();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s6 = peg$c11;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseoptsep();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c252(s1, s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s2 = peg$c75;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsesep();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseoptsep();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s6 = peg$c0;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c1); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsestmtsep_no_stmt_();
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$currPos;
                      s10 = peg$parseunknown_stmt2();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestmtsep_no_stmt_();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$currPos;
                        s10 = peg$parseunknown_stmt2();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestmtsep_no_stmt_();
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s9 = peg$c2;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c3); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseoptsep();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c253(s1, s3, s4, s8);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseunknown_stmt2() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c75;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsesep();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestring();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptsep();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c11;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseoptsep();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c254(s1, s2, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c75;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsesep();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestring();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseoptsep();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s5 = peg$c0;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c1); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsestmtsep_no_stmt_();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$currPos;
                    s9 = peg$parseunknown_stmt2();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsestmtsep_no_stmt_();
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$currPos;
                      s9 = peg$parseunknown_stmt2();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestmtsep_no_stmt_();
                        if (s10 !== peg$FAILED) {
                          s9 = [s9, s10];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s8 = peg$c2;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseoptsep();
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c255(s1, s2, s3, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentifier_xml_();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseALPHA();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c256;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c257); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseALPHA();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDIGIT();
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s5 = peg$c256;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c257); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s5 = peg$c67;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c68); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c82;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c83); }
                  }
                }
              }
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseALPHA();
            if (s5 === peg$FAILED) {
              s5 = peg$parseDIGIT();
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s5 = peg$c256;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c257); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s5 = peg$c67;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c68); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s5 = peg$c82;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c83); }
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseidentifier_xml_() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c258.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c259); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c260.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c261); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$c262.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c263); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0;

      s0 = peg$parsestring_quoted_();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring_unquoted_();
      }

      return s0;
    }

    function peg$parsestring_quoted_() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseDQUOTE();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = void 0;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c264); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseDQUOTE();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c264); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseoptsep();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s7 = peg$c265;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c266); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseoptsep();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseDQUOTE();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$currPos;
                    s11 = [];
                    s12 = peg$currPos;
                    s13 = peg$currPos;
                    peg$silentFails++;
                    s14 = peg$parseDQUOTE();
                    peg$silentFails--;
                    if (s14 === peg$FAILED) {
                      s13 = void 0;
                    } else {
                      peg$currPos = s13;
                      s13 = peg$FAILED;
                    }
                    if (s13 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s14 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s14 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c264); }
                      }
                      if (s14 !== peg$FAILED) {
                        s13 = [s13, s14];
                        s12 = s13;
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$currPos;
                      s13 = peg$currPos;
                      peg$silentFails++;
                      s14 = peg$parseDQUOTE();
                      peg$silentFails--;
                      if (s14 === peg$FAILED) {
                        s13 = void 0;
                      } else {
                        peg$currPos = s13;
                        s13 = peg$FAILED;
                      }
                      if (s13 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s14 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c264); }
                        }
                        if (s14 !== peg$FAILED) {
                          s13 = [s13, s14];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    }
                    if (s11 !== peg$FAILED) {
                      s10 = input.substring(s10, peg$currPos);
                    } else {
                      s10 = s11;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseDQUOTE();
                      if (s11 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9, s10, s11];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseoptsep();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 43) {
                  s7 = peg$c265;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c266); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseoptsep();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseDQUOTE();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$currPos;
                      s11 = [];
                      s12 = peg$currPos;
                      s13 = peg$currPos;
                      peg$silentFails++;
                      s14 = peg$parseDQUOTE();
                      peg$silentFails--;
                      if (s14 === peg$FAILED) {
                        s13 = void 0;
                      } else {
                        peg$currPos = s13;
                        s13 = peg$FAILED;
                      }
                      if (s13 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s14 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c264); }
                        }
                        if (s14 !== peg$FAILED) {
                          s13 = [s13, s14];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$currPos;
                        s13 = peg$currPos;
                        peg$silentFails++;
                        s14 = peg$parseDQUOTE();
                        peg$silentFails--;
                        if (s14 === peg$FAILED) {
                          s13 = void 0;
                        } else {
                          peg$currPos = s13;
                          s13 = peg$FAILED;
                        }
                        if (s13 !== peg$FAILED) {
                          if (input.length > peg$currPos) {
                            s14 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c264); }
                          }
                          if (s14 !== peg$FAILED) {
                            s13 = [s13, s14];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      }
                      if (s11 !== peg$FAILED) {
                        s10 = input.substring(s10, peg$currPos);
                      } else {
                        s10 = s11;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseDQUOTE();
                        if (s11 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9, s10, s11];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c267(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSQUOTE();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseSQUOTE();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c264); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            s6 = peg$parseSQUOTE();
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c264); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSQUOTE();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parseoptsep();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 43) {
                  s7 = peg$c265;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c266); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseoptsep();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseSQUOTE();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$currPos;
                      s11 = [];
                      s12 = peg$currPos;
                      s13 = peg$currPos;
                      peg$silentFails++;
                      s14 = peg$parseSQUOTE();
                      peg$silentFails--;
                      if (s14 === peg$FAILED) {
                        s13 = void 0;
                      } else {
                        peg$currPos = s13;
                        s13 = peg$FAILED;
                      }
                      if (s13 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s14 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c264); }
                        }
                        if (s14 !== peg$FAILED) {
                          s13 = [s13, s14];
                          s12 = s13;
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$currPos;
                        s13 = peg$currPos;
                        peg$silentFails++;
                        s14 = peg$parseSQUOTE();
                        peg$silentFails--;
                        if (s14 === peg$FAILED) {
                          s13 = void 0;
                        } else {
                          peg$currPos = s13;
                          s13 = peg$FAILED;
                        }
                        if (s13 !== peg$FAILED) {
                          if (input.length > peg$currPos) {
                            s14 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c264); }
                          }
                          if (s14 !== peg$FAILED) {
                            s13 = [s13, s14];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      }
                      if (s11 !== peg$FAILED) {
                        s10 = input.substring(s10, peg$currPos);
                      } else {
                        s10 = s11;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseSQUOTE();
                        if (s11 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9, s10, s11];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parseoptsep();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 43) {
                    s7 = peg$c265;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c266); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseoptsep();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseSQUOTE();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        s11 = [];
                        s12 = peg$currPos;
                        s13 = peg$currPos;
                        peg$silentFails++;
                        s14 = peg$parseSQUOTE();
                        peg$silentFails--;
                        if (s14 === peg$FAILED) {
                          s13 = void 0;
                        } else {
                          peg$currPos = s13;
                          s13 = peg$FAILED;
                        }
                        if (s13 !== peg$FAILED) {
                          if (input.length > peg$currPos) {
                            s14 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c264); }
                          }
                          if (s14 !== peg$FAILED) {
                            s13 = [s13, s14];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$currPos;
                          s13 = peg$currPos;
                          peg$silentFails++;
                          s14 = peg$parseSQUOTE();
                          peg$silentFails--;
                          if (s14 === peg$FAILED) {
                            s13 = void 0;
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                          if (s13 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                              s14 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c264); }
                            }
                            if (s14 !== peg$FAILED) {
                              s13 = [s13, s14];
                              s12 = s13;
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        }
                        if (s11 !== peg$FAILED) {
                          s10 = input.substring(s10, peg$currPos);
                        } else {
                          s10 = s11;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseSQUOTE();
                          if (s11 !== peg$FAILED) {
                            s6 = [s6, s7, s8, s9, s10, s11];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c267(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsestring_unquoted_() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$currPos;
      s5 = peg$parsesep();
      if (s5 !== peg$FAILED) {
        if (peg$c268.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c269); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (peg$c270.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c271); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          s5 = peg$parsesep();
          if (s5 !== peg$FAILED) {
            if (peg$c268.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c269); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (peg$c270.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c271); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesep() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = peg$parseline_break();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomment_();
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseWSP();
          if (s2 === peg$FAILED) {
            s2 = peg$parseline_break();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecomment_();
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseoptsep() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = peg$parseline_break();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomment_();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWSP();
        if (s2 === peg$FAILED) {
          s2 = peg$parseline_break();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecomment_();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsestmtsep_no_stmt_() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseoptsep();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecomment_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecomment_();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomment_() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesingle_line_comment_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoptsep();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemulti_line_comment_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseoptsep();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsesingle_line_comment_() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c272) {
        s1 = peg$c272;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseline_break();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = void 0;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c264); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseline_break();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c264); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseline_break();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemulti_line_comment_() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c274) {
        s1 = peg$c274;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c275); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c276) {
          s6 = peg$c276;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c277); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = void 0;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c264); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c276) {
              s6 = peg$c276;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c277); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c264); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c276) {
            s3 = peg$c276;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c277); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseline_break() {
      var s0;

      s0 = peg$parseCRLF();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLF();
      }

      return s0;
    }

    function peg$parseSQUOTE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c278;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c279); }
      }

      return s0;
    }

    function peg$parsepct_encoded() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s2 = peg$c280;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c281); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseHEXDIG();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseHEXDIG();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsereserved() {
      var s0;

      s0 = peg$parsegen_delims();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_delims();
      }

      return s0;
    }

    function peg$parsegen_delims() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 58) {
        s0 = peg$c75;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s0 = peg$c71;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s0 = peg$c282;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c283); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 35) {
              s0 = peg$c284;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c285); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 91) {
                s0 = peg$c78;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s0 = peg$c80;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c81); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 64) {
                    s0 = peg$c286;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c287); }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesub_delims() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 33) {
        s0 = peg$c288;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c289); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s0 = peg$c290;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c291); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s0 = peg$c292;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c293); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s0 = peg$c278;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c279); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s0 = peg$c244;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c245); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s0 = peg$c246;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c247); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s0 = peg$c294;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c295); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                      s0 = peg$c265;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c266); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s0 = peg$c296;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c297); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s0 = peg$c11;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c12); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 61) {
                            s0 = peg$c84;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c85); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseunreserved() {
      var s0;

      s0 = peg$parseALPHA();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDIGIT();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s0 = peg$c67;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s0 = peg$c82;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c83); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s0 = peg$c256;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c257); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 126) {
                  s0 = peg$c298;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c299); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseuri() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsescheme();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c75;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsehier_part();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 63) {
              s5 = peg$c282;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c283); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsequery();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 35) {
                s6 = peg$c284;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c285); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsefragment();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c300();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehier_part() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c272) {
        s1 = peg$c272;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseauthority();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepath_abempty();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepath_absolute();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepath_rootless();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepath_empty();
          }
        }
      }

      return s0;
    }

    function peg$parsescheme() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseALPHA();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseALPHA();
        if (s4 === peg$FAILED) {
          s4 = peg$parseDIGIT();
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s4 = peg$c265;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c266); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s4 = peg$c67;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c68); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c82;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
              }
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseALPHA();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDIGIT();
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s4 = peg$c265;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c266); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s4 = peg$c67;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c68); }
                }
                if (s4 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s4 = peg$c82;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c83); }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseauthority() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseuserinfo();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s3 = peg$c286;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c287); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsehostname();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c75;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseport();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseuserinfo() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseunreserved();
      if (s2 === peg$FAILED) {
        s2 = peg$parsepct_encoded();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesub_delims();
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s2 = peg$c75;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseunreserved();
        if (s2 === peg$FAILED) {
          s2 = peg$parsepct_encoded();
          if (s2 === peg$FAILED) {
            s2 = peg$parsesub_delims();
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s2 = peg$c75;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsehostname() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIP_literal();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsereg_name_item_();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIPv4address();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parsereg_name_item_();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsereg_name();
        }
      }

      return s0;
    }

    function peg$parseIP_literal() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c78;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIPv6address();
        if (s2 === peg$FAILED) {
          s2 = peg$parseIPvFuture();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c80;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c81); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIPvFuture() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 118) {
        s1 = peg$c301;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseHEXDIG();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseHEXDIG();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c82;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parseunreserved();
            if (s6 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s6 = peg$c75;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseunreserved();
                if (s6 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s6 = peg$c75;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = input.substring(s4, peg$currPos);
            } else {
              s4 = s5;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIPv6address() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseh16_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseh16_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseh16_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseh16_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseh16_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseh16_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsels32();
                  if (s8 !== peg$FAILED) {
                    s2 = [s2, s3, s4, s5, s6, s7, s8];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c303) {
          s2 = peg$c303;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseh16_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseh16_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseh16_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseh16_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseh16_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsels32();
                    if (s8 !== peg$FAILED) {
                      s2 = [s2, s3, s4, s5, s6, s7, s8];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseh16();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c303) {
              s3 = peg$c303;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c304); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseh16_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseh16_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseh16_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseh16_();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsels32();
                      if (s8 !== peg$FAILED) {
                        s2 = [s2, s3, s4, s5, s6, s7, s8];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$currPos;
            s3 = peg$parseh16_();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseh16();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c303) {
                s3 = peg$c303;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c304); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseh16_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseh16_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseh16_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsels32();
                      if (s7 !== peg$FAILED) {
                        s2 = [s2, s3, s4, s5, s6, s7];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$currPos;
              s3 = peg$currPos;
              s4 = peg$parseh16_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseh16_();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseh16();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c303) {
                  s3 = peg$c303;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c304); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseh16_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseh16_();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsels32();
                      if (s6 !== peg$FAILED) {
                        s2 = [s2, s3, s4, s5, s6];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$currPos;
                s3 = peg$currPos;
                s4 = peg$parseh16_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseh16_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseh16_();
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseh16();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c303) {
                    s3 = peg$c303;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c304); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseh16_();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsels32();
                      if (s5 !== peg$FAILED) {
                        s2 = [s2, s3, s4, s5];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  s2 = peg$currPos;
                  s3 = peg$currPos;
                  s4 = peg$parseh16_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    s6 = peg$parseh16_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$currPos;
                      s8 = peg$parseh16_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseh16_();
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        if (s9 !== peg$FAILED) {
                          s8 = [s8, s9];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      if (s7 === peg$FAILED) {
                        s7 = null;
                      }
                      if (s7 !== peg$FAILED) {
                        s6 = [s6, s7];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseh16();
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c303) {
                      s3 = peg$c303;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c304); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsels32();
                      if (s4 !== peg$FAILED) {
                        s2 = [s2, s3, s4];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$currPos;
                    s3 = peg$currPos;
                    s4 = peg$parseh16_();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$currPos;
                      s6 = peg$parseh16_();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$currPos;
                        s8 = peg$parseh16_();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$currPos;
                          s10 = peg$parseh16_();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseh16_();
                            if (s11 === peg$FAILED) {
                              s11 = null;
                            }
                            if (s11 !== peg$FAILED) {
                              s10 = [s10, s11];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            s8 = [s8, s9];
                            s7 = s8;
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                        if (s7 === peg$FAILED) {
                          s7 = null;
                        }
                        if (s7 !== peg$FAILED) {
                          s6 = [s6, s7];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                      if (s5 === peg$FAILED) {
                        s5 = null;
                      }
                      if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                    if (s3 === peg$FAILED) {
                      s3 = null;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseh16();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c303) {
                        s3 = peg$c303;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c304); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseh16();
                        if (s4 !== peg$FAILED) {
                          s2 = [s2, s3, s4];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                    if (s1 === peg$FAILED) {
                      s1 = peg$currPos;
                      s2 = peg$currPos;
                      s3 = peg$currPos;
                      s4 = peg$parseh16_();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$currPos;
                        s6 = peg$parseh16_();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$currPos;
                          s8 = peg$parseh16_();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$currPos;
                            s10 = peg$parseh16_();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$currPos;
                              s12 = peg$parseh16_();
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parseh16_();
                                if (s13 === peg$FAILED) {
                                  s13 = null;
                                }
                                if (s13 !== peg$FAILED) {
                                  s12 = [s12, s13];
                                  s11 = s12;
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                              if (s11 === peg$FAILED) {
                                s11 = null;
                              }
                              if (s11 !== peg$FAILED) {
                                s10 = [s10, s11];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                            if (s9 === peg$FAILED) {
                              s9 = null;
                            }
                            if (s9 !== peg$FAILED) {
                              s8 = [s8, s9];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                          if (s7 === peg$FAILED) {
                            s7 = null;
                          }
                          if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                        if (s5 === peg$FAILED) {
                          s5 = null;
                        }
                        if (s5 !== peg$FAILED) {
                          s4 = [s4, s5];
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 === peg$FAILED) {
                        s3 = null;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseh16();
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = null;
                      }
                      if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c303) {
                          s3 = peg$c303;
                          peg$currPos += 2;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c304); }
                        }
                        if (s3 !== peg$FAILED) {
                          s2 = [s2, s3];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsels32() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseh16();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c75;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseh16();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseIPv4address();
      }

      return s0;
    }

    function peg$parseh16_() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseh16();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c75;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseh16() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseHEXDIG();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseHEXDIG();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseHEXDIG();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseHEXDIG();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseIPv4address() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsedec_octet();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c82;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedec_octet();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c82;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c83); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsedec_octet();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s7 = peg$c82;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsedec_octet();
                  if (s8 !== peg$FAILED) {
                    s2 = [s2, s3, s4, s5, s6, s7, s8];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsedec_octet() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c305) {
        s2 = peg$c305;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c307.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c308); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 50) {
          s2 = peg$c309;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c310); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$c311.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c312); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDIGIT();
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 49) {
            s2 = peg$c8;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDIGIT();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseDIGIT();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (peg$c250.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c251); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDIGIT();
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$parseDIGIT();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsereg_name() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsereg_name_item_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsereg_name_item_();
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsereg_name_item_() {
      var s0;

      s0 = peg$parseunreserved();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepct_encoded();
      }

      return s0;
    }

    function peg$parseport() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDIGIT();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsepath() {
      var s0;

      s0 = peg$parsepath_abempty();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepath_absolute();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepath_noscheme();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepath_rootless();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepath_empty();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepath_abempty() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c71;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsesegment();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c71;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesegment();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsepath_absolute() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c71;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsesegment_nz();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s7 = peg$c71;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parsesegment();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 47) {
              s7 = peg$c71;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsesegment();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsepath_noscheme() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsesegment_nz_nc();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s5 = peg$c71;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsesegment();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c71;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesegment();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsepath_rootless() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsesegment_nz();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s5 = peg$c71;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsesegment();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c71;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesegment();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsepath_empty() {
      var s0;

      s0 = peg$c313;

      return s0;
    }

    function peg$parsesegment() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsepchar();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsepchar();
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesegment_nz() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsepchar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsepchar();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesegment_nz_nc() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseunreserved();
      if (s2 === peg$FAILED) {
        s2 = peg$parsepct_encoded();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesub_delims();
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 64) {
              s2 = peg$c286;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c287); }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseunreserved();
          if (s2 === peg$FAILED) {
            s2 = peg$parsepct_encoded();
            if (s2 === peg$FAILED) {
              s2 = peg$parsesub_delims();
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 64) {
                  s2 = peg$c286;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c287); }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsepchar() {
      var s0;

      s0 = peg$parseunreserved();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepct_encoded();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesub_delims();
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s0 = peg$c75;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 64) {
                s0 = peg$c286;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c287); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsequery() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsepchar();
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c71;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s2 = peg$c282;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c283); }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsepchar();
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c71;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 63) {
              s2 = peg$c282;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c283); }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsefragment() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsepchar();
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c71;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s2 = peg$c282;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c283); }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsepchar();
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c71;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 63) {
              s2 = peg$c282;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c283); }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseuri_reference() {
      var s0;

      s0 = peg$parseuri();
      if (s0 === peg$FAILED) {
        s0 = peg$parserelative_ref();
      }

      return s0;
    }

    function peg$parserelative_ref() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parserelative_part();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 63) {
          s3 = peg$c282;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c283); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsequery();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s4 = peg$c284;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c285); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefragment();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserelative_part() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c272) {
        s1 = peg$c272;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseauthority();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepath_abempty();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsepath_absolute();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepath_noscheme();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepath_empty();
          }
        }
      }

      return s0;
    }

    function peg$parseabsolute_uri() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsescheme();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c75;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsehier_part();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 63) {
              s5 = peg$c282;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c283); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsequery();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseALPHA() {
      var s0;

      if (peg$c314.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c315); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c316.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c317); }
        }
      }

      return s0;
    }

    function peg$parseBIT() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c248;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 49) {
          s0 = peg$c8;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
      }

      return s0;
    }

    function peg$parseCHAR() {
      var s0;

      if (peg$c318.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c319); }
      }

      return s0;
    }

    function peg$parseCR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 13) {
        s0 = peg$c320;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }

      return s0;
    }

    function peg$parseCRLF() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLF();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCTL() {
      var s0;

      if (peg$c322.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 127) {
          s0 = peg$c324;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c325); }
        }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c326.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c327); }
      }

      return s0;
    }

    function peg$parseDQUOTE() {
      var s0;

      if (peg$c328.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c329); }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      s0 = peg$parseDIGIT();
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c330) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c331); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c332) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c333); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c334) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c335); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c336) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c337); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c338) {
                  s0 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c339); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 1).toLowerCase() === peg$c340) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c341); }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseHTAB() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c342;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c343); }
      }

      return s0;
    }

    function peg$parseLF() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c344;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c345); }
      }

      return s0;
    }

    function peg$parseLWSP() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWSP();
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCRLF();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWSP();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWSP();
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseCRLF();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWSP();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseOCTET() {
      var s0;

      if (peg$c346.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c347); }
      }

      return s0;
    }

    function peg$parseSP() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c348;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c349); }
      }

      return s0;
    }

    function peg$parseVCHAR() {
      var s0;

      if (peg$c350.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c351); }
      }

      return s0;
    }

    function peg$parseWSP() {
      var s0;

      s0 = peg$parseSP();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHTAB();
      }

      return s0;
    }


      function extractOptional(optional, index) {
        return optional != null ? optional[index] : null;
      }

      function extractList(list, index) {
        return list.map(function (element) { return element[index];});
      }

      function buildList(head, tail, index) {
        return [head].concat(extractList(tail, index));
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
